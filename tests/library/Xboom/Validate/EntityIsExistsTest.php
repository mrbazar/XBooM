<?php
/**
 *  CMF for web applications based on Zend Framework 1 and Doctrine 2
 *  Copyright (C) 2010  Eugene Gruzdev aka yugeon
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @copyright  Copyright (c) 2010 yugeon <yugeon.ru@gmail.com>
 * @license    http://www.gnu.org/licenses/gpl-3.0.html  GNU GPLv3
 */

/**
 * Test class for EntityIsExists.
 * Generated by PHPUnit on 2010-12-05 at 23:53:17.
 */
namespace test\Xboom\Validate;
use \Xboom\Validate\EntityIsExists,
    \Mockery as m;

class EntityIsExistsTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var EntityIsExists
     */
    protected $object;

    /**
     *
     * @var \Doctrine\ORM\Query
     */
    protected $query;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();

        $em = m::mock('\\Doctrine\\ORM\\EntityManager');

        $this->query = m::mock('Query');

        $queryBuilder = m::mock('\\Doctrine\\ORM\\QueryBuilder');
        $queryBuilder->shouldReceive('select')->andReturn($queryBuilder);
        $queryBuilder->shouldReceive('from')->andReturn($queryBuilder);
        $queryBuilder->shouldReceive('where')->andReturn($queryBuilder);
        $queryBuilder->shouldReceive('setParameter')->andReturn($queryBuilder);
        $queryBuilder->shouldReceive('getQuery')->andReturn($this->query);
        $queryBuilder->shouldReceive('expr')->andReturn($queryBuilder);
        $queryBuilder->shouldReceive('eq')->andReturn($queryBuilder);

        $em->shouldReceive('createQueryBuilder')->andReturn($queryBuilder);

        $testEntityName = 'User';
        $testIdentityField = 'login';

        $options = array(
            'em'     => $em,
            'entity' => $testEntityName,
            'field'  => $testIdentityField
        );

        $this->object = new EntityIsExists($options);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        parent::tearDown();
        m::close();
    }

    public function testCanCreateEntityIsExistsValidator()
    {
        $this->assertNotNull($this->object);
        $this->assertType('\\Zend_Validate_Interface', $this->object);
    }

    public function testShouldReturnTrueIfEntityIsExists()
    {
        $existsValueIdentity = 'Exists value identity';
        $this->query->shouldReceive('execute')->andReturn(array($existsValueIdentity));

        $this->assertTrue($this->object->isValid($existsValueIdentity));
    }

    public function testShouldReturnFalseIfEntityIsNotExists()
    {
        $notExistsValueIdentity = 'Not exists value identity';
        $this->query->shouldReceive('execute')->andReturn(array());

        $this->assertFalse($this->object->isValid($notExistsValueIdentity));
    }
}
