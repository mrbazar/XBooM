
<?php $this->headStyle()->captureStart();?>

    ul {
        margin: 0;
        padding: 0;
        padding-left: 30px;
    }

    ul.sortable, ul.sortable ul {
        margin: 0 0 0 25px;
        padding: 0;
        list-style-type: none;
    }

    ul.sortable {
        margin: 4em 0;
        width: 400px;
    }

    .sortable li {
        margin: 5px 0 0 0;
        padding: 0;
    }

    .sortable li div  {
        border: 1px solid black;
        padding: 3px;
        margin: 0;
        cursor: move;
    }

    .jquery-ajax-loader {
        background: #BBBBBB url(images/ajax-loader.gif) no-repeat 50% 50%;
        z-index: 9999;
    }
    .jquery-ajax-loader-mini {
        background: #BBBBBB url(images/ajax-loader-mini.gif) no-repeat 50% 50%;
        z-index: 9999;
    }
    .ajax-loader-ok {
        background: #BBB url(images/ajax-loader-ok32.png) no-repeat 50% 50%;
        z-index: 9999;
    }
    .ajax-loader-error {
        background: #BBB url(images/ajax-loader-error32.png) no-repeat 50% 50%;
        z-index: 9999;
    }
<?php $this->headStyle()->captureEnd();?>

                        <h2>[<?php echo $this->escape($this->menuName); ?>]</h2>
<?php 
    $this->addHelperPath('Xboom/View/Helper', 'Xboom_View_Helper');
    echo $this->nestedSortable($this->menuContainer, 'sortable', 'menuList')
        ->setScriptPath('modules/admin/js/jquery/jquery.ui.nestedSortable.js')
        ->setIndent(24);
?>

    <div id="add-page-form" title="Add new page">
        
    </div>

    <!TODO: add translate support-->
    <hr />
    <button id="save">Save</button>
    <button id="add-page-button">Add new page</button>

    <script type="text/javascript" src="modules/admin/js/jquery/jquery.ajaxLoader.js"></script>
    <script type="text/javascript">

	$(document).ready(function(){

        $('#save')
        .button()
        .click(function(){

            var data = getOrder($('ul.sortable'));

            $.ajax({
                url: '/admin/navigation/save-menu/format/json',
                dataType: 'json',
                type: 'post',
                data: { menuName: '<?php echo $this->escape($this->menuName); ?>', data: data },
                beforeSend: function(){
                    $('ul.sortable').ajaxLoader();
                    $('#save').attr('disabled','disabled');
                },
                timeout: 10000,
                complete: function(){
                    $('#save').removeAttr('disabled');
                },
                error: function(){
                    $('ul.sortable').ajaxLoader('showClass', 'ajax-loader-error');
                    alert('An error occurred while saving. Try again later.');
                },
                success: function(r){
                    if ('error' == r.result) {
                        this.error();
                        return;
                    }
                    $('ul.sortable').ajaxLoader('showClass', 'ajax-loader-ok');
                }
            });
        });

        $('ul.sortable').nestedSortable({
            update: function(event, ui) {
                ui.item.find('> div:first').addClass('ui-state-hover');
            }
        });

        var height = $(window).height() * 0.8;
        var width = $(window).width() * 0.7;

        $( "#add-page-form" ).dialog({
			autoOpen: false,
			modal: true,
            height: height,
            width: width,
            buttons: {
                Cancel: function() {
					$(this).dialog('close');
				},
                'Add': function() {
                    $(this).find('> form:first').submit();
                }
            }
        });

        $('#add-page-button')
        .button()
        .click(function() {
            $('#add-page-form').dialog('open');
            $.ajax({
                url: '/admin/navigation/add-page/format/html',
                dataType: 'html',
                type: 'get',
                data: { menuName: '<?php echo $this->escape($this->menuName); ?>'},
                beforeSend: function(){
                    $('#add-page-form').ajaxLoader();
                    $('#add-page-button').attr('disabled','disabled');
                },
                timeout: 10000,
                complete: function(){
                    $('#add-page-button').removeAttr('disabled');
                },
                error: function(){
                    $('#add-page-form').ajaxLoader('showClass', 'ajax-loader-error');
                    alert('An error occurred while create new page. Try again later.');
                },
                success: function(r){
                    if ('error' == r.result) {
                        this.error();
                        return;
                    }
                    $('#add-page-form').html(r).ajaxLoader('showClass', 'ajax-loader-ok', 1);
                }
            });
        });

    });

    function getOrder($ul){

        var $li = $ul.find('li');

        var isFirst = function($element){
            return $element.prev().length === 0;
        };

        var isLast = function($element){
            return $element.next().length === 0;
        };

        var hasChildren = function($element){
            return $element.find('> ul > li:first').length === 1;
        };

        var checkDepth = function($start, selector){
            var level = 0;

            while (true) {
                $start = $start.find(selector);

                if ($start.length !== 0) {
                    level++;
                } else {
                    break;
                }
            }

            return level;
        };

        var getItemIdFromElement = function($element)
        {
            var res = $element.attr('id').match($element.expression || (/(.+)[-=_](.+)/));
            return ($element.key && $element.expression ? res[1] : res[2]);
        }

        var level = -1,
            parents = [0],	// parents[level] = parent_id
            prevWasLastSibling = false,
            data = [];

        $li.each(function(){

            var $self = $(this);

            if (prevWasLastSibling) {
                level -= checkDepth($self.prev(), '> ul > li:last');
                prevWasLastSibling = false;

            } else if (isFirst($self)) {
                level++;
            }

            data.push({
                level: level,
                parent: parents[level],
                order: $self.index(),
                id: getItemIdFromElement($self)
            });

            if (hasChildren($self)) {
                parents[level + 1] = getItemIdFromElement($self);

            } else if (isLast($self)) {		// Don't evaluate if hasChildren
                prevWasLastSibling = true;
            }
        });

        return data;
    };
    </script>